apiVersion: v1
kind: Template
labels:
  template: mongodb-statefulset-replication-template
message: |-
  The following service(s) have been created in your project: ${MONGODB_SERVICE_NAME}.

         Username: ${MONGODB_USER}
         Password: ${MONGODB_PASSWORD}
    Database Name: ${MONGODB_DATABASE}
   Connection URL: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${MONGODB_SERVICE_NAME}/${MONGODB_DATABASE}

  For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/blob/master/3.4/README.md.
metadata:
  annotations:
    description: |-
      MongoDB database service, with statefulset replication. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/blob/master/3.2/README.md.

      NOTE: Scaling up to more replicas may require manual intervention and scaling down to less replicas will require manual intervention. You must have persistent volumes available in your cluster to use this template.
    iconClass: icon-mongodb
    openshift.io/display-name: MongoDB StatefulSet Replication
    openshift.io/documentation-url: https://docs.openshift.org/latest/using_images/db_images/mongodb.html
    openshift.io/long-description: This template provides a MongoDB replica set with
      a database created. The database is stored on persistent storage.  The database
      name, username, and password are chosen via parameters when provisioning this
      service.
    openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/support-url: https://access.redhat.com
    tags: database,mongodb
  creationTimestamp: null
  name: mongodb-statefulset-replication
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-admin_password: '{.data[''mongodb-admin-password'']}'
      template.openshift.io/expose-database_name: '{.data[''mongodb-database-name'']}'
      template.openshift.io/expose-keyfile_value: '{.data[''mongodb-keyfile-value'']}'
      template.openshift.io/expose-password: '{.data[''mongodb-password'']}'
      template.openshift.io/expose-replica_name: '{.data[''mongodb-replica-name'']}'
      template.openshift.io/expose-username: '{.data[''mongodb-user'']}'
      template.openshift.io/expose-service_name: '{.data[''mongodb-service-name'']}'
      template.openshift.io/expose-replica_count: '{.data[''mongodb-replica-count'']}'
    name: ${MONGODB_SERVICE_NAME}
  stringData:
    mongodb-admin-password: ${MONGODB_ADMIN_PASSWORD}
    mongodb-keyfile-value: ${MONGODB_KEYFILE_VALUE}
    mongodb-database-name: ${MONGODB_DATABASE}
    mongodb-password: ${MONGODB_PASSWORD}
    mongodb-replica-name: ${MONGODB_REPLICA_NAME}
    mongodb-user: ${MONGODB_USER}
    mongodb-service-name: ${MONGODB_SERVICE_NAME}
    mongodb-replica-count: ${MONGODB_REPLICA_COUNT}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-mongodb_service_uri: mongodb://{.spec.clusterIP}:{.spec.ports[?(.name=="mongo")].port}/${MONGODB_DATABASE}?replicaSet=${MONGODB_REPLICA_NAME}
    name: ${MONGODB_SERVICE_NAME}
  spec:
    ports:
    - name: mongo
      nodePort: 0
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      name: ${MONGODB_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    name: ${MONGODB_SERVICE_NAME}-internal
  spec:
    ports:
    - name: mongo
      nodePort: 0
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      name: ${MONGODB_SERVICE_NAME}
    clusterIP: None
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      name: ${MONGODB_SERVICE_NAME}
    name: ${MONGODB_SERVICE_NAME}
  spec:
    replicas: ${MONGODB_REPLICA_COUNT}
    selector:
      matchLabels:
        name: ${MONGODB_SERVICE_NAME}
    serviceName: ${MONGODB_SERVICE_NAME}-internal
    template:
      metadata:
        labels:
          name: ${MONGODB_SERVICE_NAME}
      spec:
        containers:
        - capabilities: {}
          env:
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: mongodb-user
                name: ${MONGODB_SERVICE_NAME}
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mongodb-password
                name: ${MONGODB_SERVICE_NAME}
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: mongodb-admin-password
                name: ${MONGODB_SERVICE_NAME}
          - name: MONGODB_DATABASE
            valueFrom:
              secretKeyRef:
                key: mongodb-database-name
                name: ${MONGODB_SERVICE_NAME}
          - name: MONGODB_REPLICA_NAME
            valueFrom:
              secretKeyRef:
                key: mongodb-replica-name
                name: ${MONGODB_SERVICE_NAME}
          - name: MONGODB_KEYFILE_VALUE
            valueFrom:
              secretKeyRef:
                key: mongodb-keyfile-value
                name: ${MONGODB_SERVICE_NAME}
          - name: MONGODB_SERVICE_NAME
            value: ${MONGODB_SERVICE_NAME}-internal
          image: ${IMAGE_NAME}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: mongodb
          args:
          - run-mongod-replication
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            initialDelaySeconds: 3
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: ${MONGODB_SERVICE_NAME}-data
    volumeClaimTemplates:
    - metadata:
        name: ${MONGODB_SERVICE_NAME}-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${VOLUME_CAPACITY}
  status: {}
parameters:
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  value: 512Mi
  required: true
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  value: openshift
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: MONGODB_SERVICE_NAME
  value: mongodb
  required: true
- description: Username for MongoDB user that will be used for accessing the database.
  displayName: MongoDB Connection Username
  name: MONGODB_USER
  generate: expression
  from: "[a-zA-Z0-9]{3}"
  required: true
- description: Password for the MongoDB connection user.
  displayName: MongoDB Connection Password
  name: MONGODB_PASSWORD
  generate: expression
  from: '[a-z0-9]{16}'
  required: true
- description: Name of the MongoDB database accessed.
  displayName: MongoDB Database Name
  name: MONGODB_DATABASE
  value: sampledb
  required: true
- description: Password for the database admin user.
  displayName: MongoDB Admin Password
  name: MONGODB_ADMIN_PASSWORD
  generate: expression
  from: '[a-z0-9]{16}'
  required: true
- description: Name of the MongoDB replica set.
  displayName: MongoDB Replica Set Name
  name: MONGODB_REPLICA_NAME
  value: rs0
  required: true
- description: Count of the MongoDB Replicas.
  displayName: MongoDB Replica Count
  name: MONGODB_REPLICA_COUNT
  value: "3"
  required: true
- description: The value of the MongoDB keyfile (https://docs.mongodb.com/manual/core/security-internal-authentication/#internal-auth-keyfile).
  displayName: MongoDB Keyfile Content
  name: MONGODB_KEYFILE_VALUE
  generate: expression
  from: '[a-z0-9]{250}'
  required: true
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  value: 1Gi
  required: true
- description: Name of the MongoDB image.
  displayName: Name of the MongoDB image
  name: IMAGE_NAME
  value: centos/mongodb-34-centos7
  required: true
