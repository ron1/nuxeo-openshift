apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: {{ name }}
    apb_name: '{{ apb_name }}'
    apb_plan_id: '{{ _apb_plan_id }}'
    apb_service_class_id: '{{ _apb_service_class_id }}'
    apb_service_instance_id: '{{ _apb_service_instance_id }}'
    component: {{ component }}
  name: {{ name }}
  namespace: {{ namespace }}
spec:
  selector:
    matchLabels:
      app: {{ name }}
      component: {{ component }}
  serviceName: {{ name }}
  replicas: {{ replicas }}
  template:
    metadata:
      labels:
        app: {{ name }}
        component: {{ component }}
{% if podAnnotations is defined and (podAnnotations | from_yaml) %}
      annotations:
{{ podAnnotations | from_yaml | to_nice_yaml(indent=2) | indent(8, true) }}
{% endif %}
    spec:
{% if securityContext is defined and (securityContext | from_yaml) %}
      securityContext:
{{ securityContext | from_yaml | to_nice_yaml(indent=2) | indent(8, true) }}
{% endif %}
      initContainers:
        - name: copy-config
          image: busybox
          command:
            - "sh"
          args:
            - "-c"
            - |
              set -e
              set -x

              cp /configdb-readonly/mongod.conf /data/configdb/mongod.conf

{% if tls_enabled %}
              cp /ca-readonly/tls.key /data/configdb/tls.key
              cp /ca-readonly/tls.crt /data/configdb/tls.crt
{% endif %}

          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: config
              mountPath: /configdb-readonly
            - name: configdir
              mountPath: /data/configdb
{% if tls_enabled %}
            - name: ca
              mountPath: /ca-readonly
{% endif %}
        - name: install
          image: "{{ installImage_repository }}:{{ installImage_tag }}"
          args:
            - --work-dir=/work-dir
          imagePullPolicy: "{{ installImage_pullPolicy }}"
          volumeMounts:
            - name: workdir
              mountPath: /work-dir

{% if bootstrap_debug_enabled is defined and bootstrap_debug_enabled %}
        - name: bootstrap-debug
          image: "{{ image_repository }}:{{ image_tag }}"
          command:
            - "bash"
          args:
            - "-c"
            - top -b -n 1000000
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: REPLICA_SET
              value: {{ replicaSetName }}
{% if auth_enabled %}
            - name: AUTH
              value: "true"
            - name: ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ admin_secret_name }}"
                  key: user
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ admin_secret_name }}"
                  key: password
            - name: MONGO_INITDB_DATABASE
              value: "{{ database }}"
            - name: MONGO_INITDB_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ user_secret_name }}"
                  key: user
            - name: MONGO_INITDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ user_secret_name }}"
                  key: password
{% endif %}
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: init
              mountPath: /init
            - name: configdir
              mountPath: /data/configdb
            - name: datadir
              mountPath: /data/db
{% endif %}

        - name: bootstrap
          image: "{{ image_repository }}:{{ image_tag }}"
          command:
            - /work-dir/peer-finder
          args:
            - -on-start=/init/on-start.sh
            - "-service={{ name }}"
          imagePullPolicy: "{{ image_pullPolicy }}"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: REPLICA_SET
              value: {{ replicaSetName }}
{% if auth_enabled %}
            - name: AUTH
              value: "true"
            - name: ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ admin_secret_name }}"
                  key: user
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ admin_secret_name }}"
                  key: password
            - name: MONGO_INITDB_DATABASE
              value: "{{ database }}"
            - name: MONGO_INITDB_USER
              valueFrom:
                secretKeyRef:
                  name: "{{ user_secret_name }}"
                  key: user
            - name: MONGO_INITDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ user_secret_name }}"
                  key: password
{% endif %}
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: init
              mountPath: /init
            - name: configdir
              mountPath: /data/configdb
            - name: datadir
              mountPath: /data/db
      containers:
        - name: {{ apb_name }}
          image: "{{ image_repository }}:{{ image_tag }}"
          imagePullPolicy: "{{ image_pullPolicy }}"
{% if extraVars is defined and (extraVars | from_yaml) %}
          env:
{{ extraVars | from_yaml | to_nice_yaml(indent=2) | indent(12, true) }}
{% endif %}
          ports:
            - name: peer
              containerPort: 27017
          resources:
{% if resources is defined and (resources | from_yaml) %}
{{ resources | from_yaml | to_nice_yaml(indent=2) | indent(12, true) }}
{% endif %}
          command:
            - mongod
          args:
            - --config=/data/configdb/mongod.conf
            - --dbpath=/data/db
            - --replSet={{ replicaSetName }}
            - --port={{ port }}
            - --bind_ip
            - "0.0.0.0"
{% if auth_enabled %}
            - --auth
{% endif %}
{% if tls_enabled %}
            - --clusterAuthMode
            - x509
            - --sslMode
            - requireSSL
            - --sslCAFile=/data/configdb/tls.crt
            - --sslPEMKeyFile=/work-dir/mongo.pem
{% endif %}
          livenessProbe:
            exec:
              command:
                - mongo
{% if tls_enabled %}
                - --ssl
                - --sslCAFile=/data/configdb/tls.crt
                - --sslPEMKeyFile=/work-dir/mongo.pem
{% endif %}
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: {{ livenessProbe_initialDelaySeconds }}
            timeoutSeconds: {{ livenessProbe_timeoutSeconds }}
            failureThreshold: {{ livenessProbe_failureThreshold }}
            periodSeconds: {{ livenessProbe_periodSeconds }}
            successThreshold: {{ livenessProbe_successThreshold }}
          readinessProbe:
            exec:
              command:
                - mongo
{% if tls_enabled %}
                - --ssl
                - --sslCAFile=/data/configdb/tls.crt
                - --sslPEMKeyFile=/work-dir/mongo.pem
{% endif %}
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: {{ readinessProbe_initialDelaySeconds }}
            timeoutSeconds: {{ readinessProbe_timeoutSeconds }}
            failureThreshold: {{ readinessProbe_failureThreshold }}
            periodSeconds: {{ readinessProbe_periodSeconds }}
            successThreshold: {{ readinessProbe_successThreshold }}
          volumeMounts:
            - name: datadir
              mountPath: /data/db
            - name: configdir
              mountPath: /data/configdb
            - name: workdir
              mountPath: /work-dir
{% if nodeSelector is defined and (nodeSelector | from_yaml) %}
      nodeSelector:
{{ nodeSelector | from_yaml | to_nice_yaml(indent=2) | indent(8, true) }}
{% endif %}
{% if affinity is defined and (affinity | from_yaml) %}
      affinity:
{{ affinity | from_yaml | to_nice_yaml(indent=2) | indent(8, true) }}
{% endif %}
{% if tolerations is defined and (tolerations | from_yaml) %}
      tolerations:
{{ tolerations | from_yaml | to_nice_yaml(indent=2) | indent(8, true) }}
{% endif %}
      volumes:
        - name: config
          configMap:
            name: {{ mongodb_configmap_name }}
        - name: init
          configMap:
            defaultMode: 0755
            name: {{ init_configmap_name }}
{% if tls_enabled %}
        - name: ca
          secret:
            defaultMode: 0400
            secretName: {{ ca_secret_name }}
{% endif %}
        - name: workdir
          emptyDir: {}
        - name: configdir
          emptyDir: {}
{% if persistentVolume_enabled %}
  volumeClaimTemplates:
    - metadata:
        name: datadir
{% if persistentVolume_annotations is defined and (persistentVolume_annotations | from_yaml) %}
        annotations:
{{ persistentVolume_annotations | from_yaml | to_nice_yaml(indent=2) | indent(12, true) }}
{% endif %}
      spec:
        accessModes:
          - {{ persistentVolume_accessMode }}
        resources:
          requests:
            storage: {{ persistentVolume_size | quote }}
{% if persistentVolume_storageClass is defined %}
{% if '-' == persistentVolume_storageClass %}
        storageClassName: ""
{% else %}
        storageClassName: "{{ persistentVolume_storageClass }}"
{% endif %}
{% endif %}
{% else %}
        - name: datadir
          emptyDir: {}
{% endif %}
